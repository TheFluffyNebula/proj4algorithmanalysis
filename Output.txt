--Initial tests for both selection sort and quicksort on a 
small set of  5 elements to make sure that they work--
How many items?
5
original prices: 0.86 1.67 9.4 3.04 4.03 
after selection sort: 0.86 1.67 3.04 4.03 9.4
after shuffle: 0.86 9.4 1.67 3.04 4.03
after quicksort: 0.86 1.67 3.04 4.03 9.4

--10k elements--
selection sort time: 0.4270706seconds
quicksort time: 0.0073905seconds

--20k elements--
selection sort time: 1.2095832seconds
quicksort time: 0.0094827seconds

--40k elements--
selection sort time: 5.3003865seconds
quicksort time: 0.0302178seconds

--100k elements--
selection sort time: 27.8744206seconds
quicksort time: 0.055845seconds

The time it took for selection sort to work on a larger array increased much faster
than for quicksort. The time complexity difference between the O(n^2) and O(n log n) sorting 
algorithms can be seen here.

For the searches, I have adjusted the max price mod 0.01 from 10 to 1000
so that linear seach is less likely to find the element. Before I did this, 
the results were very similar, almost always within a factor of 10-100.
--20k elements at $10 max--
element found at index 1482 using linear search
linear search time: 7.85E-5seconds
element found at index 1053 using binary search
binary search time: 9.2E-6seconds

After I did this, linear search now likely has to look through more of the array to find the 
result, increasing number of comparisons/operations.
--20k elements at $1000 max--
element found at index 86975 using linear search
linear search time: 0.0069088seconds
element found at index 55 using binary search
binary search time: 2.68E-5seconds

The difference when elements aren't as easy to find is increased between the two searching methods.

The "2" files are my attempt to get a custom comparator to work, based off
this page: https://usaco.guide/problems/usaco-896-mountain-view/solution (java version)
In theory, java uses quicksort so it'll take a similar amount of time as the faster above.
I do realize that I could probably replace the comparison in the original quicksort 
from ints to Strings but I just want to try this built-in method.

--10 elements-- (Yep, it works)
original: milk, milk, chicken, rice, beer, water, soda, wine, fish, pork, 
sorted: beer, chicken, fish, milk, milk, pork, rice, soda, water, wine, 

Builtin sort times: I will copy the output from driver2 and manually compare it to
that of quicksort from driver. Results could also differ since one sorts strings 
while the other sorts ints.

--10k elements--
Builtin sort time for 10000 items: 0.025121seconds
quicksort on ints for 10k: 0.007

--20k elements--
Builtin sort time for 20000 items: 0.0192675seconds (actually went down?)
quicksort on ints for 20k: 0.009

--40k elements--
Builtin sort time for 40000 items: 0.0247923seconds
quicksort on ints for 40k: 0.03

--100k elements--
Builtin sort time for 100000 items: 0.0535289seconds
quicksort on ints for 100k: 0.055 (very similar)

--1 million elements--
Builtin sort time for 1000000 items: 0.4661533seconds 
quicksort on ints for 1m: 0.5849268seconds

It did confirm my hypothesis that builtin quicksort does indeed have the
same time complexity as a method quicksort.